modifier ::=
	 "public"
	 "protected"
	 "static"
	 "final"
	 "native"
	 "synchronized"
	 "abstract"

static_initializer ::= "static" statement_block

integer_literal ::= ( ( "1..9" { "0..9" } )
		| { "0..7" }
		| ( "0" "x" "0..9a..f" { "0..9a..f" } ) )
		[ "1" ]

character ::= "based on the unicode character set"

string ::= "''" { character } "''"

decimal_digits ::= "0..9" { "0..9" }

exponent_part ::= "e" [ "+" | "-" ] decimal_digits

variable_initializer ::= expression | ( "{" [ variable_initializer
		     { "," variable_initializer } [ "," ] ] "}" )

variable_declarator ::= identifier { "[" "]" } [ "=" variable_initializer ]

identifier ::= "a..z,$,_" { "a..z,$,_,0..9,unicode character over OOCO" }

constructor_declaration ::= { modifier } identifier "(" [ parameter_list ] ")"
			statement_block

interface_name ::= identifier | ( package_name "." identifier )

interface_declaration ::= { modifier } "interface" identifier
		      [ "extends" interface_name { "," interface_name } ]
		      "{" { field_declaration } "}"

method_declaration ::= { modifier } type_identifier
		   "(" [ parameter_list ] ")" { "[" "]" }
		   ( statement_block | ";" )

parameter_list ::= parameter { "," parameter }

variable_declaration ::= { modifier } type variable_declarator
		     { "," variable_declarator } ";"

class_declaration ::= { modifier } "class" identifier
		  [ "extends" class_name ]
		  [ "implements" interface_name { "," interface_name } ]
		  "{" { field_declaration } "}"

doc_comment ::= "/**" "... text ..." "*/"

type_declaration ::= [ doc_comment ] ( class_declaration | interface_declaration ) ";"

class_name ::= identifier | ( package_name "." identifier )

package_name ::= identifier | ( package_name "." identifier )

package_statement ::= "package" package_name ";"

import_statement ::= "import" ( ( package_name "." "*" ";" )
		 | ( class_name | interface_name ) ) ";"

expression ::= numeric_expression | testing_expression | logical_expression
	   | string_expression | bit_expression | casting_expression |
	   creating_expression | literal_expression | "null" | "super"
	   | "this" | identifier | ( "(" expression ")" )
	   | ( expression ( ( "(" [ arglist ] ")" )
	   | ( "[" expression "]" )
	   | ( "." expression ) | ( "," expression )
	   | ( "instanceof" (class_name | interface_name ) ) ) )

numeric_expression ::= ( ( "-" | "++" | "--" ) expression )
		   | ( expression ( "++" | "--" ) ) | ( expression
		   ( "+" | "+=" | "-" | "-=" | "*" | "*=" | "/" | "/=" | "%" 
		   | "%=" ) expression )

testing_expression ::= ( expression ( ">" | "<" | ">=" | "<="
		   | "==" | "!=" ) expression )

string_expression ::= ( expression ( "+" | "+=" ) expression )

casting_expression ::= "(" type ")" expression

literal_expression ::= integer_literal | float_literal | string | character

type ::= type_specifier { "[" "]" }

type_specifier ::= "boolean" | "byte" | "char"
	       | "short" | "int" | "float" | "long"
	       | "double" | class_name | interface_name

creating_expression ::= "new" ( ( classe_name "(" [arglist ] ")" )
		    | ( type_specifier [ "[" expression "]" ] { "[" "]" } )
		    | ( "(" expression ")" ) )

arglist ::= expression { "," expression }

if_statement ::= "if" "(" expression ")" statement [ "else" statement ]

do_statement ::= "do" statement "while" "(" expression ")" ";"

for_statement ::= "for" "(" ( variable_declaration | ( expression ";" ) | ";" )
	      [ expression ] ";" [ expression ] ";" ")" statement 

switch_statement ::= "switch" "(" expression ")" "{"
		 { ( "case" expression ":" ) | ( "default" ":" ) | statement } "}"

parameter ::= type identifier { "[" "]" }

try_statement ::= "try" statement { "catch" "(" parameter ")" statement }
	      [ "finally" statement ]

statement_block ::= "{" { statement } "}"

statement ::= variable_declaration | ( expression ";" ) | (statement_block )
	  | ( if_statement ) | ( do_statement ) | ( while_statement ) 
	  | ( for_statement ) | ( try_statement ) | ( switch_statement ) 
	  | ( "synchronized" "(" expression ")" statement )
	  | ( "return" [ expression ] ";" ) | ( "throw" expression ";" )
	  | ( identifier ":" statement ) | ( "break" [ identifier ] ";" )
	  | ( "continue" [ identifier ] ";" ) | ( ";" )

while_statement ::= "while" "(" expression ")" statement

compilation_unit ::= [ package_statement ] { import_statement } { type_statement }